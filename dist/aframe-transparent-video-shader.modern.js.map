{"version":3,"file":"aframe-transparent-video-shader.modern.js","sources":["../index.js"],"sourcesContent":["AFRAME.registerShader('transparent-video', {\n  schema: {\n    src: { type: 'map' },\n  },\n\n  applyWebmShader: function(videoEl) {\n    const videoTexture = new THREE.VideoTexture(videoEl);\n\n    videoTexture.format = THREE.RGBAFormat;\n\n    this.material = new THREE.MeshBasicMaterial({\n      map: videoTexture, transparent: true,\n    });\n  },\n  \n  applyHEVCShader: function(videoEl) {\n    const videoTexture = new THREE.VideoTexture(videoEl);\n    const alphaTexture = new THREE.VideoTexture(videoEl);\n\n    videoTexture.format = THREE.RGBAFormat;\n    alphaTexture.format = THREE.AlphaFormat;\n    \n    this.material = new THREE.ShaderMaterial({\n      vertexShader: `\n        varying vec2 vUv;\n        \n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        varying vec2 vUv;\n        uniform sampler2D videoTexture;\n        uniform sampler2D alphaTexture;\n\n        void main() {\n          vec4 videoColor = texture2D(videoTexture, vUv);\n          vec4 alphaColor = texture2D(alphaTexture, vUv);\n\n          gl_FragColor = vec4(videoColor.rgb, alphaColor.a);\n        }\n      `,\n      uniforms: {\n        videoTexture: { type: 't', value: videoTexture },\n        alphaTexture: { type: 't', value: alphaTexture }\n      },\n      transparent: true\n    });\n  },\n  \n  init: function (data) {\n    const videoEl = data.src;\n    const videoUrl = new URL(videoEl.currentSrc);\n    const splitedUrl = videoUrl.pathname.split('.');\n    const videoType = splitedUrl[splitedUrl.length - 1]?.toLowerCase();\n\n    data.transparent = true;\n  \n    if (videoType === 'webm') {\n      this.applyWebmShader(videoEl);\n    } else {\n      this.applyHEVCShader(videoEl);\n    }\n  },\n});"],"names":["AFRAME","registerShader","schema","src","type","applyWebmShader","videoEl","videoTexture","THREE","VideoTexture","format","RGBAFormat","this","material","MeshBasicMaterial","map","transparent","applyHEVCShader","alphaTexture","AlphaFormat","ShaderMaterial","vertexShader","fragmentShader","uniforms","value","init","data","_splitedUrl","splitedUrl","URL","currentSrc","pathname","split","videoType","length","toLowerCase"],"mappings":"AAAAA,OAAOC,eAAe,oBAAqB,CACzCC,OAAQ,CACNC,IAAK,CAAEC,KAAM,QAGfC,gBAAiB,SAASC,GACxB,MAAMC,EAAe,IAAIC,MAAMC,aAAaH,GAE5CC,EAAaG,OAASF,MAAMG,WAE5BC,KAAKC,SAAW,IAAIL,MAAMM,kBAAkB,CAC1CC,IAAKR,EAAcS,aAAa,GAEpC,EAEAC,gBAAiB,SAASX,GACxB,MAAMC,EAAe,IAAIC,MAAMC,aAAaH,GACtCY,EAAe,IAAIV,MAAMC,aAAaH,GAE5CC,EAAaG,OAASF,MAAMG,WAC5BO,EAAaR,OAASF,MAAMW,YAE5BP,KAAKC,SAAW,IAAIL,MAAMY,eAAe,CACvCC,aAAe,0LAQfC,eAAiB,kVAYjBC,SAAU,CACRhB,aAAc,CAAEH,KAAM,IAAKoB,MAAOjB,GAClCW,aAAc,CAAEd,KAAM,IAAKoB,MAAON,IAEpCF,aAAa,GAEjB,EAEAS,KAAM,SAAUC,GAAM,IAAAC,EACpB,MAAMrB,EAAUoB,EAAKvB,IAEfyB,EADW,IAAIC,IAAIvB,EAAQwB,YACLC,SAASC,MAAM,KACrCC,EAAYN,OAAHA,EAAGC,EAAWA,EAAWM,OAAS,SAA/BP,EAAAA,EAAmCQ,cAErDT,EAAKV,aAAc,EAED,SAAdiB,EACFrB,KAAKP,gBAAgBC,GAErBM,KAAKK,gBAAgBX,EAEzB"}